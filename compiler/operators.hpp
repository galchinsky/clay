#ifndef __CLAYNAMES_HPP
#define __CLAYNAMES_HPP

namespace clay {

ObjectPtr primitive_addressOf(CompilerState* cst);
ObjectPtr primitive_boolNot(CompilerState* cst);
ObjectPtr primitive_Pointer(CompilerState* cst);
ObjectPtr primitive_CodePointer(CompilerState* cst);
ObjectPtr primitive_ExternalCodePointer(CompilerState* cst);
ObjectPtr primitive_AttributeCCall(CompilerState* cst);
ObjectPtr primitive_AttributeStdCall(CompilerState* cst);
ObjectPtr primitive_AttributeFastCall(CompilerState* cst);
ObjectPtr primitive_AttributeThisCall(CompilerState* cst);
ObjectPtr primitive_AttributeLLVMCall(CompilerState* cst);
ObjectPtr primitive_Array(CompilerState* cst);
ObjectPtr primitive_Vec(CompilerState* cst);
ObjectPtr primitive_Tuple(CompilerState* cst);
ObjectPtr primitive_Union(CompilerState* cst);
ObjectPtr primitive_Static(CompilerState* cst);
ObjectPtr primitive_ByRef(CompilerState* cst);
ObjectPtr primitive_RecordWithProperties(CompilerState* cst);
ObjectPtr primitive_activeException(CompilerState* cst);

ExprPtr primitive_expr_addressOf(CompilerState* cst);
ExprPtr primitive_expr_boolNot(CompilerState* cst);
ExprPtr primitive_expr_Pointer(CompilerState* cst);
ExprPtr primitive_expr_CodePointer(CompilerState* cst);
ExprPtr primitive_expr_ExternalCodePointer(CompilerState* cst);
ExprPtr primitive_expr_AttributeCCall(CompilerState* cst);
ExprPtr primitive_expr_AttributeStdCall(CompilerState* cst);
ExprPtr primitive_expr_AttributeFastCall(CompilerState* cst);
ExprPtr primitive_expr_AttributeThisCall(CompilerState* cst);
ExprPtr primitive_expr_AttributeLLVMCall(CompilerState* cst);
ExprPtr primitive_expr_Array(CompilerState* cst);
ExprPtr primitive_expr_Vec(CompilerState* cst);
ExprPtr primitive_expr_Tuple(CompilerState* cst);
ExprPtr primitive_expr_Union(CompilerState* cst);
ExprPtr primitive_expr_Static(CompilerState* cst);
ExprPtr primitive_expr_ByRef(CompilerState* cst);
ExprPtr primitive_expr_RecordWithProperties(CompilerState* cst);
ExprPtr primitive_expr_activeException(CompilerState* cst);

ObjectPtr operator_dereference(CompilerState* cst);
ObjectPtr operator_prefixOperator(CompilerState* cst);
ObjectPtr operator_infixOperator(CompilerState* cst);
ObjectPtr operator_caseP(CompilerState* cst);
ObjectPtr operator_tupleLiteral(CompilerState* cst);
ObjectPtr operator_staticIndex(CompilerState* cst);
ObjectPtr operator_index(CompilerState* cst);
ObjectPtr operator_fieldRef(CompilerState* cst);
ObjectPtr operator_call(CompilerState* cst);
ObjectPtr operator_destroy(CompilerState* cst);
ObjectPtr operator_copy(CompilerState* cst);
ObjectPtr operator_move(CompilerState* cst);
ObjectPtr operator_assign(CompilerState* cst);
ObjectPtr operator_updateAssign(CompilerState* cst);
ObjectPtr operator_prefixUpdateAssign(CompilerState* cst);
ObjectPtr operator_indexAssign(CompilerState* cst);
ObjectPtr operator_indexUpdateAssign(CompilerState* cst);
ObjectPtr operator_fieldRefAssign(CompilerState* cst);
ObjectPtr operator_fieldRefUpdateAssign(CompilerState* cst);
ObjectPtr operator_staticIndexAssign(CompilerState* cst);
ObjectPtr operator_staticIndexUpdateAssign(CompilerState* cst);
ObjectPtr operator_callMain(CompilerState* cst);
ObjectPtr operator_charLiteral(CompilerState* cst);
ObjectPtr operator_iterator(CompilerState* cst);
ObjectPtr operator_nextValue(CompilerState* cst);
ObjectPtr operator_hasValueP(CompilerState* cst);
ObjectPtr operator_getValue(CompilerState* cst);
ObjectPtr operator_throwValue(CompilerState* cst);
ObjectPtr operator_exceptionIsP(CompilerState* cst);
ObjectPtr operator_exceptionAs(CompilerState* cst);
ObjectPtr operator_exceptionAsAny(CompilerState* cst);
ObjectPtr operator_continueException(CompilerState* cst);
ObjectPtr operator_unhandledExceptionInExternal(CompilerState* cst);
ObjectPtr operator_exceptionInInitializer(CompilerState* cst);
ObjectPtr operator_exceptionInFinalizer(CompilerState* cst);
ObjectPtr operator_packMultiValuedFreeVarByRef(CompilerState* cst);
ObjectPtr operator_packMultiValuedFreeVar(CompilerState* cst);
ObjectPtr operator_unpackMultiValuedFreeVarAndDereference(CompilerState* cst);
ObjectPtr operator_unpackMultiValuedFreeVar(CompilerState* cst);
ObjectPtr operator_variantReprType(CompilerState* cst);
ObjectPtr operator_DispatchTagCount(CompilerState* cst);
ObjectPtr operator_dispatchTag(CompilerState* cst);
ObjectPtr operator_dispatchIndex(CompilerState* cst);
ObjectPtr operator_invalidDispatch(CompilerState* cst);
ObjectPtr operator_ifExpression(CompilerState* cst);
ObjectPtr operator_asExpression(CompilerState* cst);
ObjectPtr operator_typeToRValue(CompilerState* cst);
ObjectPtr operator_typesToRValues(CompilerState* cst);
ObjectPtr operator_doIntegerAddChecked(CompilerState* cst);
ObjectPtr operator_doIntegerSubtractChecked(CompilerState* cst);
ObjectPtr operator_doIntegerMultiplyChecked(CompilerState* cst);
ObjectPtr operator_doIntegerQuotientChecked(CompilerState* cst);
ObjectPtr operator_doIntegerRemainderChecked(CompilerState* cst);
ObjectPtr operator_doIntegerShiftLeftChecked(CompilerState* cst);
ObjectPtr operator_doIntegerNegateChecked(CompilerState* cst);
ObjectPtr operator_doIntegerConvertChecked(CompilerState* cst);

ExprPtr operator_expr_dereference(CompilerState* cst);
ExprPtr operator_expr_prefixOperator(CompilerState* cst);
ExprPtr operator_expr_infixOperator(CompilerState* cst);
ExprPtr operator_expr_caseP(CompilerState* cst);
ExprPtr operator_expr_tupleLiteral(CompilerState* cst);
ExprPtr operator_expr_staticIndex(CompilerState* cst);
ExprPtr operator_expr_index(CompilerState* cst);
ExprPtr operator_expr_fieldRef(CompilerState* cst);
ExprPtr operator_expr_call(CompilerState* cst);
ExprPtr operator_expr_destroy(CompilerState* cst);
ExprPtr operator_expr_copy(CompilerState* cst);
ExprPtr operator_expr_move(CompilerState* cst);
ExprPtr operator_expr_assign(CompilerState* cst);
ExprPtr operator_expr_updateAssign(CompilerState* cst);
ExprPtr operator_expr_prefixUpdateAssign(CompilerState* cst);
ExprPtr operator_expr_indexAssign(CompilerState* cst);
ExprPtr operator_expr_indexUpdateAssign(CompilerState* cst);
ExprPtr operator_expr_fieldRefAssign(CompilerState* cst);
ExprPtr operator_expr_fieldRefUpdateAssign(CompilerState* cst);
ExprPtr operator_expr_staticIndexAssign(CompilerState* cst);
ExprPtr operator_expr_staticIndexUpdateAssign(CompilerState* cst);
ExprPtr operator_expr_callMain(CompilerState* cst);
ExprPtr operator_expr_charLiteral(CompilerState* cst);
ExprPtr operator_expr_iterator(CompilerState* cst);
ExprPtr operator_expr_nextValue(CompilerState* cst);
ExprPtr operator_expr_hasValueP(CompilerState* cst);
ExprPtr operator_expr_getValue(CompilerState* cst);
ExprPtr operator_expr_throwValue(CompilerState* cst);
ExprPtr operator_expr_exceptionIsP(CompilerState* cst);
ExprPtr operator_expr_exceptionAs(CompilerState* cst);
ExprPtr operator_expr_exceptionAsAny(CompilerState* cst);
ExprPtr operator_expr_continueException(CompilerState* cst);
ExprPtr operator_expr_unhandledExceptionInExternal(CompilerState* cst);
ExprPtr operator_expr_exceptionInInitializer(CompilerState* cst);
ExprPtr operator_expr_exceptionInFinalizer(CompilerState* cst);
ExprPtr operator_expr_packMultiValuedFreeVarByRef(CompilerState* cst);
ExprPtr operator_expr_packMultiValuedFreeVar(CompilerState* cst);
ExprPtr operator_expr_unpackMultiValuedFreeVarAndDereference(CompilerState* cst);
ExprPtr operator_expr_unpackMultiValuedFreeVar(CompilerState* cst);
ExprPtr operator_expr_variantReprType(CompilerState* cst);
ExprPtr operator_expr_DispatchTagCount(CompilerState* cst);
ExprPtr operator_expr_dispatchTag(CompilerState* cst);
ExprPtr operator_expr_dispatchIndex(CompilerState* cst);
ExprPtr operator_expr_invalidDispatch(CompilerState* cst);
ExprPtr operator_expr_ifExpression(CompilerState* cst);
ExprPtr operator_expr_asExpression(CompilerState* cst);
ExprPtr operator_expr_typeToRValue(CompilerState* cst);
ExprPtr operator_expr_typesToRValues(CompilerState* cst);
ExprPtr operator_expr_doIntegerAddChecked(CompilerState* cst);
ExprPtr operator_expr_doIntegerSubtractChecked(CompilerState* cst);
ExprPtr operator_expr_doIntegerMultiplyChecked(CompilerState* cst);
ExprPtr operator_expr_doIntegerQuotientChecked(CompilerState* cst);
ExprPtr operator_expr_doIntegerRemainderChecked(CompilerState* cst);
ExprPtr operator_expr_doIntegerShiftLeftChecked(CompilerState* cst);
ExprPtr operator_expr_doIntegerNegateChecked(CompilerState* cst);
ExprPtr operator_expr_doIntegerConvertChecked(CompilerState* cst);

}

#endif
